ggtitle("TITLE OF THE FIGURE")
p1 + warrior_theme()
p2 <- ggplot(data = dat, aes(x = x, y = y2, group = factor(grp))) +
geom_line(stat = "identity", aes(linetype = factor(grp)), size = 0.7, colour = "#04529C") +
ylab("Y LABEL") + xlab("X LABEL") + ggtitle("TITLE OF THE FIGURE")
p2
p2 + warrior_theme()
warrior_theme2 <- function() {
theme(
legend.position = "bottom", legend.title = element_text(family = "Impact", colour = "#04529C", size = 10),
legend.background = element_rect(fill = "#E2E2E3"),
legend.key = element_rect(fill = "#E2E2E3", colour = "#E2E2E3"),
legend.text = element_text(family = "Impact", colour = "#E7A922", size = 10),
plot.background = element_rect(fill = "#E2E2E3", colour = "#E2E2E3"),
panel.background = element_rect(fill = "#E2E2E3"),
panel.background = element_rect(fill = "white"),
axis.text = element_text(colour = "#FFCC33", family = "Impact"),
plot.title = element_text(colour = "#04529C", face = "bold", size = 18, vjust = 1, family = "Impact"),
axis.title = element_text(colour = "#04529C", face = "bold", size = 13, family = "Impact"),
panel.grid.major.y = element_line(colour = "#FFCC33"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text = element_text(family = "Impact", colour = "white"),
strip.background = element_rect(fill = "#FFCC33"),
axis.ticks = element_line(colour = "#FFCC33")
)
}
p2 + warrior_theme2() + scale_linetype_discrete("GROUP")
p3 <- ggplot(data = dat, aes(x = reorder(x, rep(1:12, 3)), y = y3, group = factor(grp))) +
geom_bar(stat = "identity", fill = "#04529C") + coord_polar() + facet_grid(. ~ grp) +
ylab("Y LABEL") + xlab("X LABEL") + ggtitle("TITLE OF THE FIGURE")
p3
p3 + warrior_theme2()
pushViewport(viewport(layout = grid.layout(4, 3)))
grid.rect(gp = gpar(fill = "#E2E2E3", col = "#E2E2E3"))
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
print(p1, vp = vplayout(1, 2))
# Generate Infographic in PNG Format
png("~/Documents/Infographics1.png", width = 10, height = 20, units = "in", res = 500)
grid.newpage()
pushViewport(viewport(layout = grid.layout(4, 3)))
grid.rect(gp = gpar(fill = "#E2E2E3", col = "#E2E2E3"))
grid.text("Golden State", y = unit(1, "npc"), x = unit(0.5, "npc"), vjust = 1, hjust = .5, gp = gpar(fontfamily = "Impact", col = "#04529C", cex = 11, alpha = 1))
grid.text("Warriors", y = unit(0.94, "npc"), gp = gpar(fontfamily = "Impact", col = "#E7A922", cex = 6.4))
grid.text("By Juan Carlos LaGuardia", vjust = 0, y = unit(0.92, "npc"), gp = gpar(fontfamily = "Impact", col = "#552683", cex = 0.8))
grid.text("Kaiser Permanente", vjust = 0, y = unit(0.913, "npc"), gp = gpar(fontfamily = "Impact", col = "#552683", cex = 0.8))
grid.text("Division of Research BSCU", vjust = 0, y = unit(0.906, "npc"), gp = gpar(fontfamily = "Impact", col = "#552683", cex = 0.8))
print(p3 + warrior_theme(), vp = vplayout(4, 1:3))
print(p1 + warrior_theme(), vp = vplayout(3, 1:3))
print(p2 + warrior_theme(), vp = vplayout(2, 1:3))
grid.rect(gp = gpar(fill = "#E7A922", col = "#E7A922"), x = unit(0.5, "npc"), y = unit(0.82, "npc"), width = unit(1, "npc"), height = unit(0.11, "npc"))
grid.text("NBA", y = unit(0.82, "npc"), x = unit(0.5, "npc"), vjust = .5, hjust = .5, gp = gpar(fontfamily = "Impact", col = "#CA8B01", cex = 13, alpha = 0.3))
grid.text("An example of R graphics and output", vjust = 0, hjust = 0, x = unit(0.01, "npc"), y = unit(0.88, "npc"), gp = gpar(fontfamily = "Impact", col = "#552683", cex = 1.2))
grid.text("DATA INFO", vjust = 0, hjust = 0, x = unit(0.01, "npc"), y = unit(0.86, "npc"), gp = gpar(fontfamily = "Impact", col = "white", cex = 1.2))
grid.text(paste(
"Syndicated to",
"Source",
"Author",
"Maintainer",
"Frequency of Update",
"Granularity",
"Temporal Date", sep = "\n"), vjust = 0, hjust = 0, x = unit(0.01, "npc"), y = unit(0.79, "npc"), gp = gpar(fontfamily = "Impact", col = "#552683", cex = 0.8))
grid.text(paste(
"github.com/LaGuardia",
"github.com/LaGuardia",
"R infographic",
"Juan Carlos LaGuardia",
"Annually",
"National",
"2009-2015", sep = "\n"), vjust = 0, hjust = 0, x = unit(0.15, "npc"), y = unit(0.79, "npc"), gp = gpar(fontfamily = "Impact", col = "#552683", cex = 0.8))
dev.off()
myLabels = c(prostate.glm@model$x, "Intercept")
plot(prostate.glm@model$coefficients, xaxt = "n", xlab = "Coefficients", ylab = "Values")
axis(1, at = 1:length(myLabels), labels = myLabels)
abline(h = 0, col = 2, lty = 2)
title("Coefficients from Logistic Regression\n of Prostate Cancer Data")
barplot(prostate.glm@model$coefficients,
main = "Coefficients from Logistic Regression\n of Prostate Cancer Data")
mtcars %>% ggvis(x = ~wt) %>%
layer_densities(
adjust = input_slider(.1, 2, value = 1, step = .1, label = "Bandwidth adjustment"),
kernel = input_select(
c("Gaussian" = "gaussian",
"Epanechnikov" = "epanechnikov",
"Rectangular" = "rectangular",
"Triangular" = "triangular",
"Biweight" = "biweight",
"Cosine" = "cosine",
"Optcosine" = "optcosine"),
label = "Kernel")
)
library(ggvis)
cocaine %>% ggvis(~month, fill := "#fff8dc") %>%
layer_histograms(width = 1, center = 0) %>%
add_axis("x", title = "month") %>%
add_axis("y", title = "count")
mtcars %>% ggvis(x = ~wt) %>%
layer_densities(
adjust = input_slider(.1, 2, value = 1, step = .1, label = "Bandwidth adjustment"),
kernel = input_select(
c("Gaussian" = "gaussian",
"Epanechnikov" = "epanechnikov",
"Rectangular" = "rectangular",
"Triangular" = "triangular",
"Biweight" = "biweight",
"Cosine" = "cosine",
"Optcosine" = "optcosine"),
label = "Kernel")
)
waffle <- function(x, rows, cols = seq_along(x), ...){
xx <- rep(cols, times = x)
lx <- length(xx)
m <- matrix(nrow = rows, ncol = (lx %/% rows) + (lx %% rows != 0))
m[1:length(xx)] <- xx
op <- par(no.readonly = TRUE)
on.exit(par(op))
par(list(...))
plot.new()
o <- cbind(c(row(m)), c(col(m))) + 1
plot.window(xlim = c(0, max(o[, 2]) + 1),
ylim = c(0, max(o[, 1]) + 1), asp = 1, xaxs = "i", yaxs = "i")
rect(o[, 2], o[, 1], o[, 2] + .85, o[, 1] + .85, col = c(m), border = NA)
invisible(list(m = m, o = o))
}
savings <- c('Mortgage ($84,911)' = 84911,
'Auto and\ntuition loans ($14,414)'=14414,
'Home equity loans ($10,062)' = 10062,
'Credit cards\n($8,565)' = 8565)
pdf('./waffle.pdf', width = 7, height = 3)
pdf('./waffle.pdf', width = 7, height = 3)
waffle <- function(x, rows, cols = seq_along(x), ...){
xx <- rep(cols, times = x)
lx <- length(xx)
m <- matrix(nrow = rows, ncol = (lx %/% rows) + (lx %% rows != 0))
m[1:length(xx)] <- xx
op <- par(no.readonly = TRUE)
on.exit(par(op))
par(list(...))
plot.new()
o <- cbind(c(row(m)), c(col(m))) + 1
plot.window(xlim = c(0, max(o[, 2]) + 1),
ylim = c(0, max(o[, 1]) + 1), asp = 1, xaxs = "i", yaxs = "i")
rect(o[, 2], o[, 1], o[, 2] + .85, o[, 1] + .85, col = c(m), border = NA)
invisible(list(m = m, o = o))
}
savings <- c('Mortgage ($84,911)' = 84911,
'Auto and\ntuition loans ($14,414)'=14414,
'Home equity loans ($10,062)' = 10062,
'Credit cards\n($8,565)' = 8565)
pdf('./waffle.pdf', width = 7, height = 3)
waffle(savings / 392, rows = 7, bg = 'cornsilk', mar = c(0,0,0,3), cols = c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"))
legend(.87, 1.3, legend = '$392', xpd = NA, bty = 'n', bg = 'cornsilk', col = 'orange', text.col = 'grey50', pch = 15, cex = .8, pt.cex = 1.5)
xx <- c(-.05, .73, .85, .93)
yy <- c(-.05, -.05, -.35, -.05)
segments(x0 = xx, y0 = .05, y1 = yy, lty = 'dotted', lwd = 1, xpd = NA, col = 'grey50')
text(xx, yy + .05, labels = names(savings), xpd = NA, cex = .6, col = 'grey50', pos = 1)
mtext('Average household savings each year', at = xx[1], font = 2, col = 'grey50', adj = 0, line = 1)
mtext('Source: Yo Mamma', side = 1, font = 3, at = xx[1], col = 'grey50', adj = 0, cex = .6, line = 2)
dev.off()
## Install packages
library(devtools)
install_github("ramnathv/htmlwidgets")
install_github("smartinsightsfromdata/rpivotTable")
## Load rpivotTable
library(rpivotTable)
data(mtcars)
## One line to create pivot table
rpivotTable(mtcars, rows="gear", col="cyl", aggregatorName="Average",
vals="mpg", rendererName="Treemap")
install.packages('xkcd')
library(xkcd)
library(ggplot2)
font_import(pattern="[H/h]umor")
font_import(pattern="[H/h]umor")
### Set up the trial dataset
d1 <- data.frame('type'=c('DROWNING','RADIATION','TOILET',"ELECTRICAL",'NOISE','PANTRY','YOUR    FALLING ON OBJECTS','OBJECTS FALLING ON YOU','BOSS','FIRE','TRAVEL TO WORK'),'score'=c(2,2,3,6,6,6,11,14,21,26,30))
# we will keep adding layers on plot p. first the bar plot
p <- NULL
p <- ggplot() + xkcdrect(aes(xmin = type-0.1,xmax= type+0.1,ymin=0,ymax =score),
d1,fill= "#D55E00", colour= "#D55E00")  +
geom_text(data=d1,aes(x=type,y=score+2.5,label=score,ymax=0),family="Humor Sans") +   coord_flip()
library(xkcd)
library(ggplot2)
p <- ggplot() + xkcdrect(aes(xmin = type-0.1,xmax= type+0.1,ymin=0,ymax =score),
d1,fill= "#D55E00", colour= "#D55E00")  +
geom_text(data=d1,aes(x=type,y=score+2.5,label=score,ymax=0),family="Humor Sans") +   coord_flip()
p <- ggplot() +
xkcdrect(aes(xmin = type-0.1,xmax= type+0.1,ymin=0,ymax =score),
d1,fill= "#D55E00", colour= "#D55E00")
d1long <- NULL
d1long <- rbind(c(0,-2),d1,c(12,32))
d1long$xaxis <- -1
d1long$yaxis <- 11.75
p <- p + geom_line(data=d1long,aes(x=type,y=jitter(xaxis)),size=1)
p <- p + geom_line(data=d1long,aes(x=yaxis,y=score), size=1)
vignette("xkcd-intro")
install.packages('extrafont')
install.packages("extrafont")
library(extrafont)
library(ggplot2)
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars) +}
p
p <- ggplot() + geom_point(aes(x=mpg, y=wt), data=mtcars)
p
download.file("http://simonsoftware.se/other/xkcd.ttf",
dest="xkcd.ttf", mode="wb")
system("mkdir ~/.fonts")
system("cp xkcd.ttf  ~/.fonts")
font_import(pattern = "[X/x]kcd", prompt=FALSE)
fonts()
fonttable()
if(.Platform$OS.type != "unix") {
## Register fonts for Windows bitmap output
loadfonts(device="win")
} else {
loadfonts()
}
browseVignettes(package = "xkcd")
library(zoo)
require(splancs)
install.packages("splancs", dependencies = TRUE, repos="http://cran.es.r-project.org/")
require(splancs)
mydatar <- read.table(text="
6.202
5.965
5.778
5.693
5.639
5.273
4.978
4.833
4.910
4.696
4.574
4.645
4.612
")
mydata1 <- mydatar[dim(mydatar)[1]:1,]
z <- zooreg(mydata1, end = as.yearqtr("2013-1"), frequency = 4)
z
mydata <- data.frame(parados=z)
mydata$year <- as.numeric(as.Date(as.yearqtr(rownames(mydata))))
mydata$label <- paste(substr(rownames(mydata),3,4),substr(rownames(mydata),6,7),sep="")
data <- mydata
data$xmin <- as.numeric(data$year) -1
data$xmax <- data$xmin + 90
data$ymin <- 4.5
data$ymax <- data$parados
n <- 3200
poligono <- mydata[,c("year","parados")]
names(poligono) <- c("x","y")
poligono <- rbind(poligono, c(max(poligono$x),4.4))
poligono <- rbind(poligono, c(min(poligono$x),4.4))
points <- data.frame(x=runif(n,range(poligono$x)[1],range(poligono$x)[2] ),
y=runif(n,range(poligono$y)[1],range(poligono$y)[2] ))
kk <- inout(points, poligono)
points <- points[kk, ]
points <- rbind(points,poligono)
x <- points$x
y <- points$y
nman <- length(x)
sizer <-runif(nman, 4, 6)
nman
xrange <- c(min(x),max(x))
yrange <- c(min(y),max(y))
ratioxy <- diff(xrange)/diff(yrange)
n <- 2
set.seed(123)
twomen <-  xkcdman(mapping= aes(x,  y,
scale,
ratioxy,
angleofspine ,
anglerighthumerus,
anglelefthumerus,
anglerightradius,
angleleftradius,
anglerightleg,
angleleftleg,
angleofneck),
data.frame(x=c(15600, 14800) ,
y=c(5.3, 5.7),
scale = 0.2,
ratioxy = ratioxy,
angleofspine = runif(n, - pi/2 - pi/10, -pi/2 + pi/10),
anglerighthumerus = runif(n, -pi/6- pi/10, - pi/6 + pi/10),
anglelefthumerus = runif(n, pi + pi/6 -pi/10, pi + pi/6 + pi/10),
anglerightradius =  runif(n, -pi/4, pi/4),
angleleftradius =  runif(n, pi -pi/4, pi + pi/4),
anglerightleg = runif(n,  3* pi/2 + pi/12 , 3* pi/2  + pi/12 + pi/10),
angleleftleg = runif(n, 3* pi/2  - pi/12 - pi/10, 3* pi/2 - pi/12 ),
angleofneck = runif(n, -pi/2-pi/10, -pi/2 + pi/10)))
p1 <- ggplot() + geom_text(aes(x,y,label="0"), data.frame(x=x,y=y),family="xkcd",alpha=0.4,size=sizer) +  xkcdaxis(xrange,yrange) +
ylab("Unemployed persons (millions)") + xlab("Date") +
twomen +
annotate("text", x= 15250, y=5.95,label="Help!", family="xkcd",size=7) +
xkcdline(aes(xbegin=xbegin,ybegin=ybegin,xend=xend,yend=yend),
data=data.frame( xbegin=15600, ybegin=5.42, xend=15250, yend=5.902  )
, xjitteramount = 200) + theme(legend.position="none")
#p1
p2 <- p1 + scale_x_continuous(breaks=as.numeric(mydata$year),label=mydata$label)
p2
ggsave("grhelp.png")
install.packages('mgcv')
library(mgcv)
# Number of knots and matrix dimensions
N <- nrow(X)
J <- ncol(X)
K <- 150
# Assign coordinate matrices
t.mat <- matrix(t.vec, nrow=N, ncol=J, byrow=TRUE)
s.mat <- matrix(seq(0,1,length=J), nrow=N, ncol=J, byrow=TRUE)
T.mat <- matrix(T.i,   nrow=N, ncol=J)
t.mat.01 <- (t.mat-min(t.mat))/(max(t.mat)-min(t.mat))
T.mat.01 <- (T.mat-min(T.mat))/(max(T.mat)-min(T.mat))
N <- nrow(X)
J <- ncol(X)
K <- 150
?gam
b0 <- lme(travel~1,data=Rail,~1|Rail,method="REML")
b <- gam(travel~s(Rail,bs="re"),data=Rail,method="REML")
intervals(b0)
gam.vcomp(b)
anova(b)
p1<-8/12976
p2<-9/10682
p1
1.96( p1*(1-p1) / n1  )
1.96*( p1*(1-p1) / n1  )
p1<-8/12976
n1<-12976
1.96*( p1*(1-p1) / n1  )
ci<- 1.96*( p1*(1-p1) / n1  )
p1+ci
p1-ci
ci<- 1.96*( p1*(1-p1)   )
p1+ci
p1-ci
p1*(1-p1)
ci<- 1.96*( (p1*(1-p1) )/n1   )
p1+ci
p1-ci
40*5000
200,000/2
200000/2
install.packages('rticles')
devtools::install_github("rstudio/rticles")
library(rticles)
install.packages('knitcitations')
install.packages('paperR')
install.packages('pander')
myLabels = c(prostate.glm@model$x, "Intercept")
plot(prostate.glm@model$coefficients, xaxt = "n", xlab = "Coefficients", ylab = "Values")
axis(1, at = 1:length(myLabels), labels = myLabels)
abline(h = 0, col = 2, lty = 2)
title("Coefficients from Logistic Regression\n of Prostate Cancer Data")
barplot(prostate.glm@model$coefficients,
main = "Coefficients from Logistic Regression\n of Prostate Cancer Data")
library(h2o)
localH2O = h2o.init(nthreads = -1)
prostate.hex = h2o.uploadFile(localH2O, path = system.file("extdata",
"prostate.csv", package="h2o"), key = "prostate.hex")
summary(prostate.hex)
prostate.glm = h2o.glm(x = c("AGE","RACE","PSA","DCAPS"), y = "CAPSULE",
data = prostate.hex, family = "binomial",
nfolds = 10, alpha = 0.5)
print(prostate.glm)
myLabels = c(prostate.glm@model$x, "Intercept")
plot(prostate.glm@model$coefficients, xaxt = "n", xlab = "Coefficients", ylab = "Values")
axis(1, at = 1:length(myLabels), labels = myLabels)
abline(h = 0, col = 2, lty = 2)
title("Coefficients from Logistic Regression\n of Prostate Cancer Data")
barplot(prostate.glm@model$coefficients,
main = "Coefficients from Logistic Regression\n of Prostate Cancer Data")
getwd()
setwd("~/Documents/LaGuardia.github.io")
setwd("~/Documents/LaGuardia.github.io")
rmd2md <- function( path_site = getwd(),
source('~/.active-rstudio-document')
setwd("~/Documents/LaGuardia.github.io")
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
library(knitr)
setwd("~/Documents/LaGuardia.github.io")
library(knitr)
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md
rmd2md()
rmd2md()
